%% Learn a Support Vector Regression from Dense Trajectory BoW to WordVector
%
%   svr model is learned from training samples and testing samples are
%   projected into word vector space via the regressor
%
%   input variables 
%   varargin{1} - perc_TrainingSet - percentage of training categories 50% default 
%   varargin{2} - cluster_type - the technique used for Kmeans, 
%   varargin{3} - nSample - the number of samples for generating codebook, 
%   varargin{4} - CodebookSize - the number of centers for Kmeans, 
%   varargin{5} - preprocess of dataset: org (original video) or sta (stabilized video), 
%   varargin{6] - featuretype, 
%   varargin{7} - do pca on input data, if 0 don't do pca if nonzero, do pca and take the first # varargin{7} dims as the process training data 
%   varargin{8} - C parameter for Support Vector Regression
%   varargin{9} - trial - the number of trials 1 to 30
%   varargin{10} - EmbeddingMethod - method to construct category embedding

function func_tr_SVR(varargin)

addpath('../libsvm_3_16/matlab/');


%% Parse Input
if isempty(varargin)
    %%% default input parameters
    Para.perc_TrainingSet = 0.5;
    Para.perc_TestingSet = 1 - Para.perc_TrainingSet;
    Para.cluster_type = 'vlfeat';
    Para.nSample = 1e5;
    Para.CodebookSize = 4000;
    Para.process = 'org'; % preprocess of dataset: org,sta
    Para.Descriptor = 'DT|HOF|HOG|MBH';
    Para.nPCA = 0;
    Para.C = 2; % Cost parameter for SVR
    Para.trial = 1;
    Para.EmbeddingMethod = 'add'; 
else
    if nargin >=1
        Para.perc_TrainingSet = varargin{1};
    else
        Para.perc_TrainingSet = 0.5; % Training set percentage
    end
    Para.perc_TestingSet = 1 - Para.perc_TrainingSet;
    
    if nargin >=2
        Para.cluster_type = varargin{2};
    else
        Para.cluster_type = 'vlfeat';
    end
    
    if nargin >=3
        Para.nSample = varargin{3};
    else
        Para.nSample = 1e5;
    end
    
    if nargin >=4
        Para.CodebookSize = varargin{4};
    else
        Para.CodebookSize = '2048';
    end
    
    if nargin >=5
        Para.process = varargin{5};
    else
        Para.process = 'sta';
    end
    
    if nargin >=6
        Para.Descriptor = varargin{6};
    else
        Para.Descriptor = 'DenseTrj|HOF|HOG|MBH';
    end
    
    if nargin >=7
        Para.nPCA = varargin{7};
    else
        Para.nPCA = 0;
    end
    
    if nargin >=8
        Para.C = varargin{8};
    else
        Para.C = 10;
    end
    
    if nargin >=9
        Para.trial = varargin{9};
    else
        Para.trial = 1;
    end
    
    if nargin >=10
        Para.EmbeddingMethod = varargin{10};
    else
        Para.EmbeddingMethod = 'add'; 
    end
end

%% Function Internal Parameters
Para.LabelVector = 'label'; % which kind of word vector strategy is used for class representation: label (the single label), add (sum up all descriptions)
Para.DataPath = '../../Data/';
Para.WordVecPath = '../../Data/HMDB_WordVector/';
Para.FEATURE = 'DenseTrj'; % DETECTOR type: STIP, DenseTrj
Para.norm_flag = 1;   % normalization strategy: org,histnorm,zscore

%%% Determine which descriptors are included
ind = 1;
rest = Para.Descriptor;
while true
    [Para.DescriptorList{ind},rest] = strtok(rest,'|');
    if isempty(rest)
        break;
    end
    ind = ind+1;
end

%% Load Video Groundtruth Label
temp = load(fullfile(Para.DataPath,'HMDB_Datasplit','PerVideoLabel.mat'));
Para.ClassNoPerVideo = temp.ClassNoPerVideo;

%% Load ZSL Category Split
temp = load(sprintf(fullfile(Para.DataPath,'HMDB_Datasplit','DatasetSplit_tr-%.1f_ts-%.1f_t-%d.mat'),Para.perc_TrainingSet,Para.perc_TestingSet,Para.trial));
Para.idx_TrainingSet = sort(temp.idx_TrainingSet,'ascend');
Para.idx_TestingSet = sort(temp.idx_TestingSet,'ascend');

%% Load Label Word Vector Representation
temp = load(sprintf(fullfile(Para.WordVecPath,'ClassLabelPhraseDict_mth-%s.mat'),Para.EmbeddingMethod));
Data.ClassLabelsPhrase = temp.ClassLabelsPhrase;
Data.phrasevec_mat = temp.phrasevec_mat;

%% Prepare Training Data
Data.tr_FeatureMat = [];
Data.tr_LabelVec = [];
Data.ts_sample_ind = [];   % test sample index
Data.tr_sample_ind = zeros(size(Para.ClassNoPerVideo,1),1);   % train sample index

clear temp;
for c_tr = 1:length(Para.idx_TrainingSet)
    
    %% Extract Training Features for each class
    temp.currentClassName = Data.ClassLabelsPhrase{Para.idx_TrainingSet(c_tr)};
    temp.tr_sample_class_ind = ismember(Para.ClassNoPerVideo(:,1),temp.currentClassName);
    Data.tr_LabelVec = [Data.tr_LabelVec ; repmat(Data.phrasevec_mat(Para.idx_TrainingSet(c_tr),:),sum(temp.tr_sample_class_ind),1)];
    Data.tr_sample_ind = Data.tr_sample_ind + temp.tr_sample_class_ind;
end

clear temp c_tr;

Data.tr_sample_ind = logical(Data.tr_sample_ind);
Data.ts_sample_ind = ~Data.tr_sample_ind;

%% Precompute Kernel Matrix
%   suggest precompute chi2 kernel and save it for re-training model

Para.KernelType = 'rbfchisq';

if exist(fullfile(Para.DataPath,'HMDB_BoW','Chi2Kernel.mat'),'file')
    %%% Exist precomputed chi2 kernel
    temp = load(fullfile(Para.DataPath,'HMDB_BoW','Chi2Kernel.mat'));
    Data.D = temp.D;
    
else
    %%% Doesn't exist precomputed chi2 kernel
    %%% Load BoW Features for different feature modalities
    Data.BoWFeature = [];
    for i = 1:length(Para.DescriptorList)
        
        temp = load(sprintf(fullfile(Para.DataPath,'HMDB_BoW','HMDB_BoW_%s_JointCodebook.mat'),Para.DescriptorList{i}));
        
        for j = 1:length(temp.BoWFeature)
            
            if isempty(temp.BoWFeature{j})
                temp.BoWFeature{j} = zeros(1,Para.CodebookSize);
                
            end
        end
        
        temp.BoWFeature = cell2mat(temp.BoWFeature);
        
        if Para.norm_flag
            %%% Normalize Feature Vector and Label Vector
            temp.FeatureMatrix = func_NormalizeFeatureMatrix(temp.BoWFeature);
        else
            temp.FeatureMatrix = temp.BoWFeature;
        end
        
        Data.BoWFeature = [Data.BoWFeature temp.FeatureMatrix];
    end
    
    Data.BoWFeature(isnan(Data.BoWFeature)) = 0;
    
    %% Compute Chi2 Kernel
    %   it may take long time to compute Chi2 kernel
    Data.D = func_PrecomputeKernel(Data.BoWFeature,Data.BoWFeature,'chisq');
    save(fullfile(Para.DataPath,'HMDB_BoW','Chi2Kernel.mat'))
end
clear temp;

Data.D = 1-Data.D;
Data.D_tr = Data.D(Data.tr_sample_ind,Data.tr_sample_ind);
Data.D_ts = Data.D(Data.ts_sample_ind,Data.tr_sample_ind);

%%% Generate RBF Chi2 Kernel Matrix
temp.A = mean(mean(Data.D));    % normalizer for RBF kernel

Data.D_tr = exp(-Data.D_tr/temp.A);

Data.D_ts = exp(-Data.D_ts/temp.A);

temp.SS = sum(Data.tr_LabelVec.^2,2);
temp.label_k = sqrt(size(Data.tr_LabelVec,2)./temp.SS);
Data.tr_LabelVec = repmat(temp.label_k,1,size(Data.tr_LabelVec,2)) .* Data.tr_LabelVec;

clear temp;

%% Training Support Vector Regression model for each dimension
%%% Parameters
kernel = 4;

parfor d = 1:size(Data.tr_LabelVec,2)
    tic;
    model{d} = libsvmtrain(Data.tr_LabelVec(:,d),[(1:size(Data.D_tr,1))' Data.D_tr],sprintf('-s 3 -t %d -c %f -h 0',kernel,Para.C)); % -s 3
    ts_LabelVec_hat(:,d) = libsvmpredict(zeros(size(Data.D_ts,1),1),[(1:size(Data.D_ts,1))' Data.D_ts],model{d});
    tr_LabelVec_hat(:,d) = libsvmpredict(zeros(size(Data.D_tr,1),1),[(1:size(Data.D_tr,1))' Data.D_tr],model{d});

    toc;
    fprintf('Finish %d th dimension\n',d)
end

%%% Normalize ts Label Vectors
temp.SS = sum(ts_LabelVec_hat.^2,2);
label_k = sqrt(size(ts_LabelVec_hat,2)./temp.SS);
ts_LabelVec_hat = repmat(label_k,1,size(ts_LabelVec_hat,2)) .* ts_LabelVec_hat;

temp.SS = sum(tr_LabelVec_hat.^2,2);
label_k = sqrt(size(tr_LabelVec_hat,2)./temp.SS);
tr_LabelVec_hat = repmat(label_k,1,size(tr_LabelVec_hat,2)) .* tr_LabelVec_hat;

%% Save Regression Results
Para.regression_path = sprintf(fullfile(Para.DataPath,'HMDB_SVR'),Para.FEATURE);

if ~exist(Para.regression_path,'dir')
    mkdir(Para.regression_path);
end

save(sprintf(fullfile(Para.regression_path,'SVR_c-%d_t-%d_embed-%s_singlecodebook.mat'),Para.C,Para.trial,Para.EmbeddingMethod),'model','tr_LabelVec_hat','ts_LabelVec_hat');

